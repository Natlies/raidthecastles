var HBCache = (function() {
	var sampleRate = hbCacheSampleRate || 100;
	var track = ztrackCountSample || function() {};

	var bubble = function() {
		try {
			var app = document.getElementById('flashapp');
        	if(app && app.bubbleToFlash && typeof app.bubbleToFlash == 'function') {
				app.bubbleToFlash.apply(app, arguments);
            }
        } catch(e) {
            onError(e);
        }
	};

	var onError = function(e) {
  		console.log(e);
	};

	var BrowserDetect = (function() {
		var browser = null;
		var version = null;
		var os = null;
		var versionSearchString = null;

		var dataBrowser = [
			{
				string: navigator.userAgent,
				subString: "Chrome",
				identity: "Chrome"
			},
			{ 	string: navigator.userAgent,
				subString: "OmniWeb",
				versionSearch: "OmniWeb/",
				identity: "OmniWeb"
			},
			{
				string: navigator.vendor,
				subString: "Apple",
				identity: "Safari",
				versionSearch: "Version"
			},
			{
				prop: window.opera,
				identity: "Opera",
				versionSearch: "Version"
			},
			{
				string: navigator.vendor,
				subString: "iCab",
				identity: "iCab"
			},
			{
				string: navigator.vendor,
				subString: "KDE",
				identity: "Konqueror"
			},
			{
				string: navigator.userAgent,
				subString: "Firefox",
				identity: "Firefox"
			},
			{
				string: navigator.vendor,
				subString: "Camino",
				identity: "Camino"
			},
			{
				string: navigator.userAgent,
				subString: "Netscape",
				identity: "Netscape"
			},
			{
				string: navigator.userAgent,
				subString: "MSIE",
				identity: "Explorer",
				versionSearch: "MSIE"
			},
			{
				string: navigator.userAgent,
				subString: "Gecko",
				identity: "Mozilla",
				versionSearch: "rv"
			},
			{
				string: navigator.userAgent,
				subString: "Mozilla",
				identity: "Netscape",
				versionSearch: "Mozilla"
			}
		];

		var dataOS = [
			{
				string: navigator.platform,
				subString: "Win",
				identity: "Windows"
			},
			{
				string: navigator.platform,
				subString: "Mac",
				identity: "Mac"
			},
			{
			   string: navigator.userAgent,
			   subString: "iPhone",
			   identity: "iPhone/iPod"
		    },
			{
				string: navigator.platform,
				subString: "Linux",
				identity: "Linux"
			}
		];

		var searchString = function (data) {
			for (var i=0;i<data.length;i++)	{
				var dataString = data[i].string;
				var dataProp = data[i].prop;
				versionSearchString = data[i].versionSearch || data[i].identity;
				if (dataString) {
					if (dataString.indexOf(data[i].subString) != -1)
						return data[i].identity;
				}
				else if (dataProp)
					return data[i].identity;
			}
		};

		var searchVersion = function (dataString) {
			var index = dataString.indexOf(versionSearchString);
			if (index == -1) return;
			return parseFloat(dataString.substring(index+versionSearchString.length+1));
		};

		var init = function() {
			browser = searchString(dataBrowser) || "An unknown browser";
			version = searchVersion(navigator.userAgent)
				|| searchVersion(navigator.appVersion)
				|| "an unknown version";
			os = searchString(dataOS) || "an unknown OS";
		};

		init();

		return {
			BROWSER: browser,
			VERSION: version,
			OS: os
		}
	}) ();

	var IndexedDBCache = (function() {
	  	var READ_ONLY = "readonly";
	  	var READ_WRITE = "readwrite";

	  	var _indexedDB = null;
	  	var _database = null;
		var _dbName = "zynga";
		var _storeName = "castleville";
		var _storeKey = "key";
		var _version = "1.0";
		var _initialized = false;

		var open = function(callback, args) {
		  	args = args || [];
			callback = callback || function() {};

		  	try {
		  		window.indexedDB = _indexedDB = window.webkitIndexedDB || window.mozIndexedDB || window.indexedDB || window.msIndexedDB || null;
	  			
	  			if(_indexedDB) {
				  	if(window.webkitIndexedDB) {
				  		window.IDBTransaction = window.webkitIDBTransaction;
				  		window.IDBKeyRange = window.webkitIDBKeyRange;
				  	}
				  
				  	if(_initialized == false) {
					  	var request = _indexedDB.open(_dbName, _version);

					  	request.onupgradeneeded = function (e) {
					    	_database = e.target.result;
					    
						    if(_database.objectStoreNames.contains(_storeName)) {
						        _database.deleteObjectStore(_storeName);
						    }

					    	_database.createObjectStore(_storeName,
					        	{keyPath: _storeKey});
					  	}

						request.onsuccess = function(e) {
						    _database = e.target.result;

						    if (_version != _database.version && _database.setVersion) {
						      	var setVrequest = _database.setVersion(_version);

						      	setVrequest.onerror = function(e) {
						      		throw e;
						      	};
						      	setVrequest.onsuccess = function(e) {
						        	if(_database.objectStoreNames.contains(_storeName)) {
						          		_database.deleteObjectStore(_storeName);
						        	}

						        	var store = _database.createObjectStore(_storeName,
						          		{keyPath: _storeKey});
						        
						        	e.target.transaction.oncomplete = function() {
						          		_initialized = true;
						          		callback.apply(window, args);
						        	};
						      	};
						    } else {
						        _initialized = true;
						        callback.apply(window, args);
						    }
						};

					  	request.onerror = function(e) {
					  		throw e;
					  	};
				  	} else {
				  		callback.apply(window, args);
				  	}
				} else {
					callback.apply(window, args);
				}
			} catch(e) {
				callback.apply(window, args);
			}

			return;
		};

		var getInternal = function(key, caches) {
			caches = caches || [];
			var cache = caches.shift() || null;

			try {
				var trans = _database.transaction([_storeName], READ_WRITE);
				var store = trans.objectStore(_storeName);
				var request = store.get(key);

				request.onsuccess = function(e) {
					var result = null;
					if(typeof e.target.result != 'undefined') {
						result = e.target.result.data || null;
					}
					
					if(!result) {
						if(cache) {
							cache.get(key, caches);
						} else {
							bubble("get", "fail", key);
						}
						
						track(sampleRate, "hbcache","indexeddb","get","miss",key);
					} else {
						bubble("get", "success", key, result);
						track(sampleRate, "hbcache","indexeddb","get","hit",key);
					}
				};

				request.onerror = function(e) {
					throw e;
				};
			} catch(e) {
				if(cache) {
					cache.get(key, caches);
				} else {
					onError(e);
					bubble("get", "fail", key);
				}

				track(sampleRate, "hbcache","indexeddb","get","miss",key);
			}

			return;
		};

		var putInternal = function(key, value, caches) {
			caches = caches || [];
			var cache = caches.shift() || null;

			try {
				var trans = _database.transaction([_storeName], READ_WRITE);
				var store = trans.objectStore(_storeName);

				var data = {};
				data["data"] = value;
				data[_storeKey] = key;

				var request = store.put(data);

				request.onsuccess = function(e) {
					bubble("put", "success", key);
					track(sampleRate, "hbcache","indexeddb","put","hit",key);
				};

				request.onerror = function(e) {
					throw e;
				};
			} catch(e) {
				if(cache) {
					cache.put(key, value, caches);
				} else {
					onError(e);
					bubble("put", "fail", key);
				}

				track(sampleRate, "hbcache","indexeddb","put","miss",key);
			}

			return;
		};

		var deleteInternal = function(key) {
			try {
				var trans = _database.transaction([_storeName], READ_WRITE);
				var store = trans.objectStore(_storeName);

				var data = {};
				data["data"] = null;
				data[_storeKey] = key;

				var request = store.put(key);

				request.onsuccess = function(e) {
					bubble("delete", "success", key);
				};

				request.onerror = function(e) {
					throw e;
				};
			} catch(e) {
				onError(e);
				bubble("delete", "fail", key);
			}

			return;
		};

		var clearInternal = function() {
			try {
				var trans = _database.transaction([_storeName], READ_WRITE);
				var store = trans.objectStore(_storeName);

				var request = store.clear();

				request.onsuccess = function(e) {
					bubble("clear", "success");
				};

				request.onerror = function(e) {
					throw e;
				};
			} catch(e) {
				onError(e);
				bubble("clear", "fail");
			}

			return;
		};

		var countInternal = function() {
			try {
				var trans = _database.transaction([_storeName], READ_WRITE);
				var store = trans.objectStore(_storeName);

				var request = store.count();

				request.onsuccess = function(e) {
					var result = e.target.result || null;

					bubble("count", "success", result);
				};

				request.onerror = function(e) {
					throw e;
				};
			} catch(e) {
				onError(e);
				bubble("count", "fail");
			}

			return;
		};

		return {
			initialize: function() {
				open();
			},

			get: function(key, caches) {
				track(sampleRate, "hbcache","indexeddb","get","attempt",key);
				return open(getInternal, [key, caches]);
			},

			put: function(key, value, caches) {
				track(sampleRate, "hbcache","indexeddb","put","attempt",key);
				return open(putInternal, [key, value, caches]);
			},

			remove: function(key) {
				return open(deleteInternal, [key]);
			},

			clear: function() {
				return open(clearInternal);
			},

			count: function() {
				return open(countInternal);
			}
		}
	}) ();

	var LocalStorageCache = (function () {
		var _localStorage = window.localStorage;
		var _cleared = false;
		var _validKeys = ['Game.swf_rev', 'GameSettings.xml_rev', 'gamefile', 'gamesettingsfile'];

		var clearOthers = function() {
			if(_cleared) {
				return;
			}

			if(_localStorage) {
				var size = _localStorage.length || 0;
				for(var i = 0; i < size; i++) {
					var key = _localStorage.key(i);
					if(key) {
						if(_validKeys.indexOf(key) == -1) {
							_localStorage.removeItem(key);
						}
					}
				}
			}

			_cleared = true;
		};

		var getInternal = function(key, caches) {
			caches = caches || [];
			var cache = caches.shift() || null;

			try {
				var result = _localStorage.getItem(key);

				if(!result) {
					if(cache) {
						cache.get(key, caches);
					} else {
						bubble("get", "fail", key);
					}

					track(sampleRate, "hbcache","localstorage","get","miss",key);
				} else {
					bubble("get", "success", key, result);
					track(sampleRate, "hbcache","localstorage","get","hit",key);
				}

				return result;
			} catch(e) {
				if(cache) {
					cache.get(key, caches);
				} else {
					onError(e);
					bubble("get", "fail", key);
				}

				track(sampleRate, "hbcache","localstorage","get","miss",key);
			}

			return;
		};

		var putInternal = function(key, value, caches) {
			caches = caches || [];
			var cache = caches.shift() || null;
			
			try {
				_localStorage.setItem(key, value);
				bubble("put", "success", key);
				track(sampleRate, "hbcache","localstorage","put","hit",key);

				return;
			} catch(e) {
				if(cache) {
					cache.put(key, value, caches);
				} else {
					onError(e);
					bubble("put", "fail", key);
				}

				track(sampleRate, "hbcache","localstorage","put","miss",key);
			}

			return;
		};

		var deleteInternal = function(key) {
			try {
				var result = _localStorage.removeItem(key);
				bubble("delete", "success", key);

				return result;
			} catch(e) {
				onError(e);
				bubble("delete", "fail", key);
			}

			return;
		};

		var clearInternal = function() {
			try {
				var result = _localStorage.clear();
				bubble("clear", "success");

				return result;
			} catch(e) {
				onError(e);
				bubble("clear", "fail");
			}

			return;
		};

		var countInternal = function() {
			try {
				var result = _localStorage.length;
				bubble("clear", "success", result);

				return result;
			} catch(e) {
				onError(e);
				bubble("count", "fail");
			}

			return;
		};

		return {
			initialize: function() {
			},

			get: function(key, caches) {
				track(sampleRate, "hbcache","localstorage","get","attempt",key);
				return getInternal(key, caches);
			},

			put: function(key, value, caches) {
				track(sampleRate, "hbcache","localstorage","put","attempt",key);
				return putInternal(key, value, caches);
			},

			remove: function(key) {
				return deleteInternal(key);
			},

			clear: function() {
				return clearInternal();
			},

			count: function() {
				return countInternal();
			}
		}
	}) ();

	var _caches = [];
	var _browser = BrowserDetect.BROWSER;

	var CHROME = 'Chrome';
	var FIREFOX = 'Firefox';
	var IE = 'Explorer';
	var SAFARI = 'Safari';
	var OPERA = 'Opera';

	var init = function() {
		if(_browser == CHROME) {
			IndexedDBCache.initialize();
			_caches.push(IndexedDBCache);
			_caches.push(LocalStorageCache);
		} else {
			_caches.push(LocalStorageCache);
		}
	}

	init();

	return {
		initialize: function() {
			init();
		},

		get: function(key) {
			var caches = _caches.slice();
			var cache = caches.shift();
			cache.get(key, caches);
		},

		put: function(key, value) {
			var caches = _caches.slice();
			var cache = caches.shift();
			cache.put(key, value, caches);
		}
	}
}) ();